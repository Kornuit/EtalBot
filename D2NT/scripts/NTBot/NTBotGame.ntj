var Rev = "1182.A";

var SoJNotify = false;
var CloneDiabloString = GetLocaleString(11005);
var SoJString = GetLocaleString(11004).substr(3);
var CloneDiabloNotify = false;
var SoJNotify = false;
var SoJElapsedTime = 0;
var InitLife;
var Corpses = 0;
var checkActOnce = false;
var joinCheck = false;
var etal = this;
var rusher = false;
var _checkAct;

function D2NTStatus(where, time, message) { return SendCopyData('D2NT Manager', null, where << 16 | time, message); }
function NTMain () {
	
	Delay(1000);

	InitLife = me.hp;

	Include("libs/common/Common.ntl");
	Common.IncludeLibs();
	Common.IncludeConfig("NTBot/char_configs");
	Include("libs/common/Exp.ntl");

	NT_LoadConfig();
	Exp.InitializeStats();

	this.ClearMessages = function () {
		for(var i = 0 ; i < Scripts.length ; i++){
			if(Scripts[i].toLowerCase().indexOf("leech") != -1){
				if(Scripts[i].toLowerCase().indexOf("baal") != -1){
					File.OverWrite("logs/messagecomands/"+me.charname+"-baal.txt", " ");
				}
				if(Scripts[i].toLowerCase().indexOf("diablo") != -1){
					File.OverWrite("logs/messagecomands/"+me.charname+"-diablo.txt", " ");
				}
				if(Scripts[i].toLowerCase().indexOf("trav") != -1){
					File.OverWrite("logs/messagecomands/"+me.charname+"-trav.txt", " ");
				}
			}
		}
	};

	this.ScriptLoadError = function () {
		while (true) {
			Print(COLOR_4 + "Failed to build script list. Pausing until max game time........");
			Delay(10001);
		}
	}

	this.CheckForFriends = function () {
		var _player = GetPlayerUnit();
		if (_player) {
			do {
				if (_player.name === me.name)
					continue;

				if (NTConfig_ExitWith.indexOf(_player.name) != -1) {
					joinCheck = true;
				}
			} while (_player.GetNext());
		}
	};

	this.CheckLeave = function () {
		var _player,
			leaveWith = "";
		for (i in NTConfig_ExitWith) {
			_player = GetPlayerUnit();
			if(_player) {
				do {
					if(_player.name === me.name)
						continue;

					if (_player.name === NTConfig_ExitWith[i]) {
						leaveWith = NTConfig_ExitWith[i];
						return leaveWith;
					}
				} while (_player.GetNext());
			}
		}
		return leaveWith;
	};

	this.ExtractName = function (path) {
		var _sect,
			_name = "";
		if (path === undefined) {
			_name = "";
		} else {
			_sect = path.split("/");
			if(_sect.length > 0) {
				do {
					if (_name !== "") {
						break;
					} else {
						if (_sect.indexOf(".ntj") != -1) {
							_name = _sect.split(0, ".");
						}
					}
				} while (_sect.GetNext());
			}
		}
		return _name;
	};

	this.KeyEvents = function (keycode) {
		var _script;
		switch(keycode) {
			case Do_DropItems:
				Tools.DropItems();
				break;
			case Do_DevTools:
				Tools.DevelopementTools();
				break;
			case Do_CoordLog:
				File.log("logs/testlog/"+me.charname+"-Coords.txt", " New Coord[" + me.x + ", " + me.y + "] " );
				break;
			case Do_HotKeyList:
				Key_HotList();
				break;
			case Do_CursorILvL:
				Tools.CursorILvl();
				break;
			case Do_StatsLog:
				Tools.CheckMyStats();
				break;
			case Do_PrintCoord:
				Tools.CheckCoord();
				break;
			case Do_CheckSpace:
				if(CheckStashSpace)
					Town.CheckFreeStashSpace(true);
				if(CheckInvSpace)
					Town.CheckFreeInventorySpace(true);
				break;
			case Do_NipCheck:
				Tools.TLNipCheck();
				break;
			case Do_InvTxtLog:
				Tools.TLInventory();
				break;
			case Do_CheckBPs:
				Tools.BPsPrint();
				break;
			case Do_ExitGame:
				Print(COLOR_4 + "Calculating stats for game!");
				Exp.ComputeStats(false);
				ExitGame();
				break;
		}
	};

	this.GameMsgEvents = function (msg, type) {
		_area = GetArea();

		switch (type)
		{
			case 4:
			{
				switch (msg.indexOf()) {
					case CloneDiabloString:
					{
						CloneDiabloNotify = true;
						SoJNotify = false;

						Common.SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + CloneDiabloString);
						SetStatusText(COLOR_1 + CloneDiabloString);
						D2NTStatus("Stop", 0, "Stop");
						D2NTStatus(8, 0, CloneDiabloString);
						me.maxgametime = 0;

						_holdPauseCheck = Tools.GetExitStatus();
						while(_holdPauseCheck == "T") {
							Delay(500);
							_holdPauseCheck = Tools.GetExitStatus();
						}

						Common.StopScript(Scripts[i]);
						Delay(500);

						TownMove.CheckAct();
					}
					break;
					case SoJString:
					{
						if (!CloneDiabloNotify && NTConfig_SoJWaitTime > 0) {
							SoJNotify = true;
							SoJElapsedTime = 0;

							Common.SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + msg);

							me.maxgametime = 0;
						}
					}
					break;
				}
			}
			break;
			case 0:
			{
				if (msg.indexOf(NTConfig_Leader) != -1) {
					Common.CheckPlayer(NTConfig_Leader);
					switch (_leaderareaid) {
						case 83:
						{
							if (msg.indexOf(NTConfig_TakeTpTravincal) != -1) {
								File.OverWrite("logs/leechcomands/"+me.charname+"-trav.txt", "takettp");
							}
						}
						break;
						case 108:
						{
							if (msg.indexOf(NTConfig_TakeTpDiablo) != -1) {
								File.OverWrite("logs/leechcomands/"+me.charname+"-diablo.txt", "takedtp");
							}
						}
						break;
						case 130:
						case 131:
						{
							if (msg.indexOf(NTConfig_GrabShrine) != -1) {
								File.OverWrite("logs/leechcomands/"+me.charname+"-baal.txt", "grabshrine");
							} else if (msg.indexOf(NTConfig_TakeTpDiablo) != -1) {
								File.OverWrite("logs/leechcomands/"+me.charname+"-baal.txt", "takebtp");
							}
						}
						break;
					}
				}
			}
			break;
		}
	};

	this.ScriptMsgEvents = function (msg) {
		var _area;

		switch(msg)
		{
		case "HOSTILE":
		case "STOP":
		case "GO":
			Common.SendMsgToScript(Scripts[i], "pause");
			break;
		}
	};

	this.BuildScriptList = function () {
		var _scriptpath,
			_possScript = [],
			_script = GetScript();

		if(_script)
		{
			do
			{
				_scriptpath = _script.name.toLowerCase();

				if(_scriptpath.indexOf("/bots/") != -1 || _scriptpath.indexOf("/rushbots/" != -1) {
					var _sname = this.ExtractName(_scriptpath);
					if (Scripts.[_sname]) {
						if (_scriptpath.indexOf("/rushbots/" != -1) {
							rusher = true;
						}
					_possScript.push(this.ExtractName(_scriptpath));
					}
				}
			} while(_script.GetNext());
		}

		if (_possScript.length > 0) {
			for (i in _possScript) {
				_scriptList.push(_possScript[i]);
			}
			return true;
		}
		return false;
	};

	if(!me.gamename) { Say("/players 5"); }

	if(NTConfig_FreeSpace == 0)
		Print(COLOR_2 + "Please don't forget to set NTConfig_FreeSpace in your character config to avoid your inv filling");

	this.ClearMessages();
	this.CheckForFriends();

	SnagIt.LoadNIPFiles("NTBot/item_configs");
	Tools.LogExitStatus("F");
	
	if(NTConfig_StartDelay > 0);
		Delay(NTConfig_StartDelay);

	GetPath(me.areaid, me.x, me.y, me.x, me.y, true);

	SetUIState(0x0A, true);

	if(!Town.PutBackEnigma()) {
		Delay(240000);
		ExitGame();
	}

	if(NTConfig_CheckPassword && !me.gamepassword){
		Print(COLOR_1 + "1No password found exiting game");
		Common.SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Exiting Game- No Password");
		Delay(2000);
		ExitGame();
	}

	Corpses = Town.GetCorpses();
	if (Corpses > 0 || InitLife < 10)
		Tools.DeathLog(Corpses, InitLife);

	if (!this.BuildScriptList()) {
		File.Log("ScriptLoadError.txt", "Failed to build script list for " + me.name);
		this.ScriptLoadError();
	}

	if(_scriptList.length > 0)
	{
		Cubing.InitCubing();

		Town.ClearInventory();
		Town.ClearBelt();

		if(!Town.LookForEnigma()) {
			if (GetUIState(0x01))
				SetUIState(0x01, false);
			Delay(240000);
			ExitGame();
		}

		if(NTConfig_GoWestFromLut){
			GoWestFromLutGholein();
		}

		Load("NTBot/tools/ToolsThread.ntj");

		if (NTConfig_PublicMode)
			Load("NTBot/tools/NTPartyHandler.ntj");
		if(NTConfig_HostileHandler)
			Load("NTBot/tools/HostHandler.ntj");

		if(NTConfig_Announcer)
			Load("NTBot/tools/LevelAnnouncer.ntj");

		if(DPSMeter)
			Load("NTBot/tools/DPS.ntj");

		RegisterEvent(EVENT_GAMEMSG, this.GameMsgEvents);
		RegisterEvent(EVENT_KEYDOWN, this.KeyEvents);
		RegisterEvent(EVENT_SCRIPTMSG, this.ScriptMsgEvents);

		SetStatusText(Rev + " Loading....");

		Include("libs/common/Snagit.ntl");
		SnagIt.ClearIgnoredItems();

		for (i in Scripts) {
			if (Scripts.hasOwnProperty(i) && _scriptList.indexOf(i) > -1 && Scripts[i]) {
				switch (rusher) {
					case false:
						Include("NTBot/bots/" + i + ".ntj");
					case true:
						Include("NTRush/rushbots/" + i + ".ntj");
				}

				if (typeof (etal[i]) === "function") {
					try {
						_checkAct = TownMove.CheckAct();
						catch (error) {
							Print(COLOR_2 + "Failed to check act. Skipping to next script.");
						} else _checkAct = true;

						if (_checkAct) {
							try {
								SetStatusText(Rev + "    Running:  " + i);
								Tracker.LogScript(i);
								TownManager.Manager();
								if (Mule.PreformCheck()) {
									Tracker.LogMuling(true);
								}
								etal[i]();
							} catch (error) {
								File.Log("logs/scripterrors/" + me.name + "_scripterror.txt", "Failed to load " + i);
								Print("Failed to load " + i);
								}
						}
					} else {
						File.Log("logs/scripterrors/" + me.name + "_scripterror.txt", "Error in script. Skipping to " + (i++));
						Print("error in the script for " + i + " skipping to next script.");
					}
				}
			}
		}
	}

	if(Common.InMyParty(this.CheckLeave()) && joinCheck) {
		TownMove.CheckAct();
		while (Common.InMyParty(this.CheckLeave()) {
			Delay(500);
		}
	}

	if(!Common.InMyParty(this.CheckLeave()) && joinCheck) {
		Exp.ComputeStats(false);
		Delay(350);
		_Checkscript = GetScript();
		if(_Checkscript){
			Common.StopScriptLeecher();
			Delay(150);
		}
		Common.CancelMenus();
		Delay(NTConfig_LeechExitDelay);
		ExitGame();
	}

	if(SoJNotify)
	{
		SoJElapsedTime += 1;
		TownMove.CheckAct();
		SetStatusText(COLOR_4 + "SoJ sales detected... " + COLOR_0 + (NTConfig_SoJWaitTime*60-SoJElapsedTime));

		if(SoJElapsedTime >= NTConfig_SoJWaitTime*60)
			SoJNotify = false;
	}

	Exp.ComputeStats(false);
	Common.StopScript(Scripts[i]);

	ExitGame();
}

function LoadConfigError()
{
	Print(COLOR_4 + "You have an error in your character configuration file");
	Delay(750);
	Print(COLOR_4 + "You MUST fix it before the bot will run");
	Delay(750);
	Print(COLOR_2 + "Go to http://wiki.projectetal.com/");
	Delay(750);
	Print(COLOR_4 + "Then find the Etal First Time Configuration Guide");
	Delay(750);
	Print(COLOR_1 + "READ THE GUIDE VERY CLOSELY BEFORE POSTING ON THE FORUMS");
}
