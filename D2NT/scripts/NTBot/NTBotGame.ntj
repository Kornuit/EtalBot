var Rev = "1182.A";

var SoJNotify = false;
var CloneDiabloString = GetLocaleString(11005);
var SoJString = GetLocaleString(11004).substr(3);
var CloneDiabloNotify = false;
var SoJNotify = false;
var SoJElapsedTime = 0;
var InitLife;
var Corpses = 0;
var checkActOnce = false;
var joinCheck = false;
var etal = this;
var rusher = false;
var _checkAct;

function D2NTStatus(where, time, message) { return SendCopyData('D2NT Manager', null, where << 16 | time, message); }
function NTMain () {
	
	Delay(1000);

	InitLife = me.hp;

	Include("libs/common/Common.ntl");
	Common.IncludeLibs();
	Common.IncludeConfig("NTBot/char_configs");
	Include("libs/common/Exp.ntl");

	LoadConfig();
	Exp.InitializeStats();

	this.ClearMessages = function () {
		for(var i = 0 ; i < Scripts.length ; i++){
			if(Scripts[i].toLowerCase().indexOf("leech") != -1){
				if(Scripts[i].toLowerCase().indexOf("baal") != -1){
					File.OverWrite("logs/messagecomands/"+me.charname+"-baal.txt", " ");
				}
				if(Scripts[i].toLowerCase().indexOf("diablo") != -1){
					File.OverWrite("logs/messagecomands/"+me.charname+"-diablo.txt", " ");
				}
				if(Scripts[i].toLowerCase().indexOf("trav") != -1){
					File.OverWrite("logs/messagecomands/"+me.charname+"-trav.txt", " ");
				}
			}
		}
	};

	this.CheckForFriends = function () {
		var _player = GetPlayerUnit();
		if (_player) {
			do {
				if (_player.name === me.name)
					continue;

				if (Config.ExitWith.indexOf(_player.name) != -1) {
					joinCheck = true;
				}
			} while (_player.GetNext());
		}
	};

	this.CheckLeave = function () {
		var _player,
			leaveWith = "";
		for (i in Config.ExitWith) {
			_player = GetPlayerUnit();
			if(_player) {
				do {
					if(_player.name === me.name)
						continue;

					if (_player.name === Config.ExitWith[i]) {
						leaveWith = Config.ExitWith[i];
						return leaveWith;
					}
				} while (_player.GetNext());
			}
		}
		return leaveWith;
	};

	this.ExtractName = function (path) {
		var _sect,
			_name = "";
		if (path === undefined) {
			_name = "";
		} else {
			_sect = path.split("/");
			if(_sect.length > 0) {
				do {
					if (_name !== "") {
						break;
					} else {
						if (_sect.indexOf(".ntj") != -1) {
							_name = _sect.split(0, ".");
						}
					}
				} while (_sect.GetNext());
			}
		}
		return _name;
	};

	this.BuildScriptList = function () {
		var _scriptpath,
			_possScript = [],
			_script = GetScript();

		if(_script)
		{
			do
			{
				_scriptpath = _script.name.toLowerCase();

				if(_scriptpath.indexOf("/bots/") != -1 || _scriptpath.indexOf("/rushbots/" != -1) {
					var _sname = this.ExtractName(_scriptpath);
					if (Scripts.[_sname]) {
						if (_scriptpath.indexOf("/rushbots/" != -1) {
							rusher = true;
						}
					_possScript.push(this.ExtractName(_scriptpath));
					}
				}
			} while(_script.GetNext());
		}

		if (_possScript.length > 0) {
			for (i in _possScript) {
				_scriptList.push(_possScript[i]);
			}
			return true;
		}
		return false;
	};

	if(!me.gamename) { Say("/players 5"); }

	if(Config.FreeSpace == 0)
		Print(COLOR_2 + "Please don't forget to set Config.FreeSpace in your character config to avoid your inv filling");

	this.ClearMessages();
	this.CheckForFriends();

	SnagIt.LoadNIPFiles("NTBot/item_configs");
	Tools.LogExitStatus("F");
	
	if(Config.StartDelay > 0);
		Delay(Config.StartDelay);

	GetPath(me.areaid, me.x, me.y, me.x, me.y, true);

	SetUIState(0x0A, true);

	if(!Town.PutBackEnigma()) {
		Delay(240000);
		ExitGame();
	}

	if(Config.CheckPassword && !me.gamepassword){
		Print(COLOR_1 + "1No password found exiting game");
		Common.SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Exiting Game- No Password");
		Delay(2000);
		ExitGame();
	}

	Corpses = Town.GetCorpses();
	if (Corpses > 0 || InitLife < 10)
		Tools.DeathLog(Corpses, InitLife);

	this.BuildScriptList();

	if(_scriptList.length > 0)
	{
		Cubing.InitCubing();

		Town.ClearInventory();
		Town.ClearBelt();

		if(!Town.LookForEnigma()) {
			if (GetUIState(0x01))
				SetUIState(0x01, false);
			Delay(240000);
			ExitGame();
		}

		if(Config.GoWestFromLut){
			GoWestFromLutGholein();
		}

		Load("NTBot/tools/ToolsThread.ntj");

		if(Config.HostileHandler)
			Load("NTBot/tools/HostHandler.ntj");

		if(Config.Announcer)
			Load("NTBot/tools/LevelAnnouncer.ntj");

		if(DPSMeter)
			Load("NTBot/tools/DPS.ntj");

		RegisterEvent(EVENT_GAMEMSG, NT_GameMsgEvents);
		RegisterEvent(EVENT_KEYDOWN, NT_KeyEvents);
		RegisterEvent(EVENT_SCRIPTMSG, NT_ScriptMsgEvents);

		SetStatusText(Rev + " Loading....");

		Include("libs/common/Snagit.ntl");
		SnagIt.ClearIgnoredItems();

		for (i in Scripts) {
			if (Scripts.hasOwnProperty(i) && _scriptList.indexOf(i) > -1 && Scripts[i]) {
				switch (rusher) {
					case false:
						Include("NTBot/bots/" + i + ".ntj");
					case true:
						Include("NTRush/rushbots/" + i + ".ntj");
				}

				if (typeof (etal[i]) === "function") {
					try {
						_checkAct = TownMove.CheckAct();
						catch (error) {
							Print(COLOR_2 + "Failed to check act. Skipping to next script.");
						} else _checkAct = true;

						if (_checkAct) {
							try {
								SetStatusText(Rev + "    Running:  " + i);
								etal[i]();
							} catch (error) {
								File.Log("logs/scripterrors/" + me.name + "_scripterror.txt", "Failed to load " + i);
								Print("Failed to load " + i);
								}
						}
					} else {
						File.Log("logs/scripterrors/" + me.name + "_scripterror.txt", "Error in script. Skipping to " + (i++));
						Print("error in the script for " + i + " skipping to next script.");
					}
				}
			}
		}
	}

	if(Common.InMyParty(this.CheckLeave()) && joinCheck) {
		TownMove.CheckAct();
		while (Common.InMyParty(this.CheckLeave()) {
			Delay(500);
		}
	}

	if(!Common.InMyParty(this.CheckLeave()) && joinCheck) {
		Exp.ComputeStats(false);
		Delay(350);
		_Checkscript = GetScript();
		if(_Checkscript){
			Common.StopScriptLeecher();
			Delay(150);
		}
		Common.CancelMenus();
		Delay(Config.LeechExitDelay);
		ExitGame();
	}

	if(SoJNotify)
	{
		SoJElapsedTime += 1;
		TownMove.CheckAct();
		SetStatusText(COLOR_4 + "Waiting for SoJ sales... " + COLOR_0 + (Config.SoJWaitTime*60-SoJElapsedTime));

		if(SoJElapsedTime >= Config.SoJWaitTime*60)
			SoJNotify = false;
	}

	Exp.ComputeStats(false);

	ExitGame();
}

function GameMsgEvents(msg, type)
{

	// ubi21 Enigma reset start
	////////////////////////////
	var _holdPauseCheck = "";
	// ubi21 Enigma reset end
	////////////////////////////

	_area = GetArea();

	if(type == 4)
	{
		if(msg.indexOf(CloneDiabloString) != -1)
		{
			CloneDiabloNotify = true;
			SoJNotify = false;

			NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + CloneDiabloString);
			SetStatusText(COLOR_1 + CloneDiabloString);
			D2NTStatus("Stop", 0, "Stop"); //This is a fake ID itll just interrupt the current status loop. Simple but effective.
			D2NTStatus(8, 0, CloneDiabloString);
			me.maxgametime = 0;

			// ubi21 Enigma reset start
			////////////////////////////

			_holdPauseCheck = NTU_GetExitStatus();
			while(_holdPauseCheck == "T") {
				NTC_Delay(500);
				_holdPauseCheck = NTU_GetExitStatus();
			}
			// ubi21 Enigma reset end
			////////////////////////////

			NTC_StopScript(NTConfig_Script[CurScriptIndex]);
			NTC_Delay(500);

			NTTM_CheckAct();
		}
		else if(msg.indexOf(SoJString) != -1 && !CloneDiabloNotify && NTConfig_SoJWaitTime > 0)
		{ // part of soj addon. !CloneDiabloNotify was added to prevent timer start on oversales after Diablo walks.
			SoJNotify = true;
			SoJElapsedTime = 0;

			NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_4 + msg);

			me.maxgametime = 0;
		}
	}

	else if(type == 1 && (msg.toLowerCase().indexOf("d2nt") != -1 || msg.toLowerCase().indexOf("error") != -1 || msg.toLowerCase().indexOf("fail") != -1))
	{
		var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
		var logfile = FileOpen("logs/errorlog/"+me.charname+"-errorlog.txt", 2);
		if(!logfile)
			var logfile = FileOpen("logs/errorlog/"+me.charname+"-errorlog.txt", 1);

		logfile.WriteLine(date + " - " + msg);
		logfile.Close();
	}

	else if(type == 1 && (msg.toLowerCase().indexOf("skipped") != -1 ))
	{
		var date = new Date().toLocaleFormat("<%a, %b %d, %H:%M>");
		var logfile = FileOpen("logs/skiplog/"+me.charname+"-skiplog.txt", 2);
		if(!logfile)
			var logfile = FileOpen("logs/skiplog/"+me.charname+"-skiplog.txt", 1);

		logfile.WriteLine(date + " - " + msg + " ( " + _area.name + " ) ");
		logfile.Close();
	}
	else if(type == 0 && msg.indexOf(Config.Leader) != -1){
		Common.CheckPlayer(Config.Leader);
		if((_leaderareaid == 130 || _leaderareaid == 131) && msg.indexOf(NTConfig_TakeTpBaal) != -1){
			File.OverWrite("logs/messagecomands/"+me.charname+"-baal.txt", 1, "takebtp")
		}
		else if((_leaderareaid == 130 || _leaderareaid == 131) && msg.indexOf(NTConfig_GrabShrine) != -1){
			File.OverWrite("logs/messagecomands/"+me.charname+"-baal.txt", 1, "grabshrine")
		}
		else if(_leaderareaid == 108 && msg.indexOf(NTConfig_TakeTpDiablo) != -1){
			File.OverWrite("logs/messagecomands/"+me.charname+"-diablo.txt", 1, "takedtp")
		}
		else if(_leaderareaid == 83 && msg.indexOf(NTConfig_TakeTpTravincal) != -1){
			File.OverWrite("logs/messagecomands/"+me.charname+"-trav.txt", 1, "takettp")
		}
	}

}

function KeyEvents(keycode)
{
	var _script;
	switch(keycode) {
		case Do_PauseBot:
		_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);
			if(_script) {
				if(_script.running) {
					_script.Stop();
					NT_ClearMessages();
					NTC_Delay(300);
					ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
					SetStatusText(COLOR_1 + Rev + "    Paused " + NTConfig_Script[CurScriptIndex]);
				}
				else {
					Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
					SetStatusText(Rev + " " + NTConfig_Script[CurScriptIndex]);
				}
			}
			break;
		case Do_PrevScript:
			_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);

			if(_script.running) {
				_script.Stop();
				NT_ClearMessages();
				NTC_Delay(300);
				ClickMap(NTC_CLICK_LUP, NTC_SHIFT_NONE, null);
				SetStatusText(COLOR_11 + Rev + " Stopped " + NTConfig_Script[CurScriptIndex]);
				break;
			}
			else {
				for(i=0; i<NTConfig_Script.length-1; i++) {
					if(CurScriptIndex < NTConfig_Script.length-1)
						CurScriptIndex++;
					else
						CurScriptIndex = 0;
				}
				SetStatusText(COLOR_14 + Rev + " Back to " + NTConfig_Script[CurScriptIndex]);
			}
			break;
		case Do_NextScript:
			_script = NTC_FindScript(NTConfig_Script[CurScriptIndex]);

			if(_script.running) {
				_script.Stop();
				NT_ClearMessages();
				SetStatusText(COLOR_11 + Rev + " Stopped " + NTConfig_Script[CurScriptIndex]);
			}
			else if(++CurScriptIndex < NTConfig_Script.length)
				SetStatusText(COLOR_14 + Rev + " Skipped to " + NTConfig_Script[CurScriptIndex]);
			else if(++CurScriptIndex >= NTConfig_Script.length) {
				CurScriptIndex = 0;
				SetStatusText(COLOR_2 + Rev + " Skipped to " + NTConfig_Script[CurScriptIndex]);
			}
			break;
		case Do_DropItems:
			NTU_DropItems();
			break;
		case Do_DevTools:
			NTU_DevelopementTools();
			break;
		case Do_CoordLog:
			NTU_LogPrint("logs/testlog/"+me.charname+"-Coords.txt", " New Coord[" + me.x + ", " + me.y + "] " );
			break;
		case Do_HotKeyList:
			Key_HotList();
			break;
		case Do_CursorILvL:
			NTU_CursorILvl();
			break;
		case Do_StatsLog:
			NTU_CheckMyStats();
			break;
		case Do_PrintCoord:
			NTU_CheckCoord();
			break;
		case Do_CheckSpace:
			if(CheckStashSpace)
				NTT_CheckFreeStashSpace(true);
			if(CheckInvSpace)
				NTT_CheckFreeInventorySpace(true);
			break;
		case Do_NipCheck:
			NTU_TLNipCheck();
			break;
		case Do_InvTxtLog:
			NTU_TLInventory();
			break;
		case Do_CheckBPs:
			T_BPsPrint();
			break;
		case Do_ExitGame:
			Print(COLOR_4 + "Calculating stats for game!");
			NTE_ComputeStats(false);
			ExitGame();
			break;
	}
}

function ScriptMsgEvents(msg)
{
	var _area;

	switch(msg)
	{
	case "QuitGame":
		NTC_StopScript(NTConfig_Script[CurScriptIndex]);
		NTC_CancelMenus();
		LastScript = true;
		break;
	case "HOSTILE":
		NTC_SendMsgToScript(NTConfig_Script[CurScriptIndex], "pause");
		break;
	case "SCRIPT_END":
		if(++CurScriptIndex < NTConfig_Script.length)
		{
			NTTM_CheckAct();
			Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
			SetStatusText(Rev + "   " + NTConfig_Script[CurScriptIndex]);
			NTC_LogCurScript(NTConfig_Script[CurScriptIndex]);
		}
		else{
			LastScript = true;
		}
		break;
	default:
		Print(COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed");

		_area = GetArea();

		if(_area)
			NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed (" + _area.name + ")");
		else
			NTC_SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + NTConfig_Script[CurScriptIndex] + " : " + msg + " failed (unknown area)");

		if(++CurScriptIndex < NTConfig_Script.length)
		{
			NTTM_CheckAct();
			Load("NTBot/bots/" + NTConfig_Script[CurScriptIndex]);
			SetStatusText(Rev + "  "  + NTConfig_Script[CurScriptIndex]);
			NTC_LogCurScript(NTConfig_Script[CurScriptIndex]);
		}
		else
			LastScript = true;
		break;
	}
}

function LoadConfigError()
{
	Print(COLOR_4 + "You have an error in your character configuration file");
	Delay(750);
	Print(COLOR_4 + "You MUST fix it before the bot will run");
	Delay(750);
	Print(COLOR_2 + "Go to http://wiki.projectetal.com/");
	Delay(750);
	Print(COLOR_4 + "Then find the Etal First Time Configuration Guide");
	Delay(750);
	Print(COLOR_1 + "READ THE GUIDE VERY CLOSELY BEFORE POSTING ON THE FORUMS");
}
