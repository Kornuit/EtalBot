Include("libs/Common_Vars.ntl");
Include("libs/common/ColorConverter.ntl");

var debugSnagit = false;
var _location;
var _NTSI_BeltSize;
_IgnoredItems = new Array();

var SnagIt = {
	ClearIgnoredItems: function () { _IgnoredList = new Array(); },

	LoadNIPFiles: function (filepath) {
		var i;
		for(i = 0 ; i < ConfigNIPFilePath.length ; i++) {
			ItemParser.OpenFile(filepath + "/" + Config.NIPFilePath[i]);
		}

		_NTSI_BeltSize = Common.GetBeltSize();
	},

	PickItems: function () {
		var i, _mode;

		for(i = 0 ; i < 25 ; i++) {
			_mode = me.mode;

			if((_mode >= 1 && _mode <= 3) || _mode == 5 || _mode == 6) { break; }

			NTC_Delay(NTC_DELAY_FRAME);
		}

		if(i < parseInt(Config.SnagDelay / NTC_DELAY_FRAME)) {
			Common.PingDelay(Config.SnagDelay - (i*NTC_DELAY_FRAME));
		}

		Include("libs/common/Itemlogger.ntl");
		return this.GrabIt();
	},

	GrabIt: function () {
		var i, _item, _checkeditem, _checkeditems, _value, _location, _minindex, _mindistance,
			resultArray = new Array();
			_area = GetArea();

		_item = Unit.FindUnit(NTC_UNIT_ITEM);

		if(!_item) { return; }

		var _mename = me.name;
		var _isEthereal = ((_item.itemflag & 0x400000) == 0x400000);
		_checkeditems = new Array();

		do {
			if(_item.mode == 3 || _item.mode == 5) {
				if(this.IsIgnoredItemInt(_item.classid)) { continue; }

				var _skipitem=false;

				for (jj = 0; jj < _IgnoredItems.length; jj+=1) {

					if (_IgnoredItems[jj] == _item.gid) { _skipitem = true; }
				}

				if (_skipitem) { continue; }

				if (GetDistance(me, _item) <= Config.SnagRange) {

					resultArray = this.CheckItem(_item, false);
					_value = resultArray[0];

					if(_value) { _checkeditems.push(new this.ItemInt(_item, _value, resultArray)); }

					else {
						if (Config.LogIgnoredItems) {
							if ((_item.quality == 2 && _item.classid > 609) || (_item.quality >= Config.LogItemQuality && (_item.classid != 515 && _item.classid != 523 && _item.classid != 516 && _item.classid != 587 && _item.classid != 588 && _item.classid != 589 && _item.classid != 590 && _item.classid != 591 && _item.classid != 592 && _item.classid != 593 && _item.classid != 594 && _item.classid != 595 && _item.classid != 596))) {
								Print(COLOR_5 + "Ignored: " + NTC_ItemQualityToD2Color[_item.quality] + _item.name);
								_IgnoredItems.push(_item.gid);
							}
						}
					}
				}
			}
		} while(_item.GetNext());

		while(_checkeditems.length > 0)
		{
			_mindistance = 100000;

			for(i = 0 ; i < _checkeditems.length ; i++)
			{
				_value = GetDistance(me.x, me.y, _checkeditems[i].x, _checkeditems[i].y);

				if(_value < _mindistance)
				{
					_minindex = i;
					_mindistance = _value;
				}
			}

			_checkeditem = _checkeditems.splice(_minindex, 1)[0];

			_item = Unit.FindUnit(NTC_UNIT_ITEM, _checkeditem.GID);

			if(_item) {
				if(!this.IsLimitedItemInt(_item)) {
					if(Town.CheckSpace(_item.xsize, _item.ysize) || _item.itemtype === 9 || _item.itemtype >= 76 && _item.itemtype <= 78) { // potion pick on full inventory fix
						if(this.PickUpItemInt(_item)) {
							switch(_checkeditem.ClassID) {

							case 515: 	// Rejuvenation Potion
							case 516: 	// Full Rejuvenation Potion

								Print("Picked up "+ NTC_ItemQualityToD2Color[9] + GetLocaleString(2209+_checkeditem.ClassID-515));
								break;

							case 523: 	//Gold

								Print("Picked up "+ NTC_ItemQualityToD2Color[7] + GetLocaleString(2215));
								break; 

							case 587: 	// Minor Healing Potion
							case 588: 	// Light Healing Potion
							case 589: 	// Healing Potion
							case 590: 	// Greater Healing Potion
							case 591: 	// Super Healing Potion

								Print("Picked up "+ NTC_ItemQualityToD2Color[10] + GetLocaleString(2266+_checkeditem.ClassID-587));
								break;

							case 592: 	// Minor Mana Potion
							case 593: 	// Light Mana Potion
							case 594: 	// Mana Potion
							case 595: 	// Greater Mana Potion
							case 596: 	// Super Mana Potion

								Print("Picked up "+ NTC_ItemQualityToD2Color[4] + GetLocaleString(2271+_checkeditem.ClassID-592));
								break;

							default:
								//Print("Picked up " + NTC_ItemQualityToD2Color[_item.quality] + _item.name.split("\n")[0]);
								if(_item.itemtype == 74 || (_item.classid >= 654 && _item.classid <= 657) || (_item.classid >= 647 && _item.classid <= 652)) {
									Print("Picked up " + NTC_ItemQualityToD2Color[8] + _item.name.split("\n")[0]);
								}
								else if((_item.classid >= 544 && _item.classid <= 555) || _item.classid == 524 || _item.classid == 525){
									Print(COLOR_4 + "Picked Quest Item " + COLOR_17 + _item.name.split("\n")[0]);
								}
								else {
									Print("Picked up " + NTC_ItemQualityToD2Color[_item.quality] + _item.name.split("\n")[0]);
								}

								if(_checkeditem.Status > -1 && _checkeditem.Status < 2 && _item.itemtype != 4 && (_item.itemtype < 76 || _item.itemtype > 81)) // first half of repeating item log fix
								{
									resultArray = this.CheckItem(_item, true);
									if(_item.itemtype == 74 || (_item.classid >= 654 && _item.classid <= 657) || (_item.classid >= 647 && _item.classid <= 652))	
										Common.SendLogToOOG(NTC_LOG_ITEM, COLOR_2 + " Kept: " + NTC_ItemQualityToMGRColor[8] + _item.name.split("\n")[0]+ ";" + _item.itemdesc + "\n" + COLOR_2 + "iLvl: " + _item.itemlevel + "\n" + COLOR_2 + "Area: " +_area.name+ "\n" + COLOR_2 +resultArray[1]+", "+resultArray[2]);
									else
										Common.SendLogToOOG(NTC_LOG_ITEM, COLOR_2 + " Kept: " + NTC_ItemQualityToMGRColor[_item.quality] + _item.name.split("\n")[0]+ ";" + _item.itemdesc + "\n" + COLOR_2 + "iLvl: " + _item.itemlevel + "\n" + COLOR_2 + "Area: " +_area.name+ "\n" + COLOR_2 +resultArray[1]+", "+resultArray[2]);
								}
								break;
							 }  
						}
					}

					else {
						if(!_checkeditem.Retry) {
							_checkeditem.Retry = true;
							Tools.ClearInventory();
							if(Config.IdInField && this.FieldItemsToId()){ // id in field add
								Attack.FieldID(); 
							}
							else if(!TownManger.VisitTown()){
								return;
							}
							_checkeditems.push(_checkeditem);
						}
					}
				}
			}
		}
	},

	ItemInt: function (item, checkedstatus) {
		this.ClassID = item.classid;
		this.GID = item.gid;
		this.x = item.x;
		this.y = item.y;
		this.Status = checkedstatus;
		this.Retry = false;
	},

	PickUpItemInt: function (snagitem) {
		var i, _classid, _result,
		_itemType = snagitem.itemtype,
		_isTelekinesis = me.classid === 1 && Config.Telekinesis && Skill.GetSkillLevel(43) && (_itemType == 4 || (_itemType > 75 && _itemType < 82));

		_classid = snagitem.classid;

		for(i = 0 ; i < 40 ; i++) {
			if((i % 10) == 0 && (snagitem.mode == 3 || snagitem.mode == 5)) {
				_result = false;
				if(_isTelekinesis) {
					if(GetDistance(me, snagitem) > 5 && GetDistance(me, snagitem) < 20 && CheckCollision(me, snagitem, 5))
						_result = true;
				}
				if(Common.ClearCursor()) {
					if (_result) {
						Skill.CastSkill(43, NTC_HAND_RIGHT, snagitem);
					}
					else if(GetDistance(me.x, me.y, snagitem.x, snagitem.y) <= 3) {
						Common.DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, snagitem);
					}
					else if(Travel.MoveTo(snagitem.areaid, snagitem.x, snagitem.y, 3, false, false)) {
						Common.DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, snagitem);
					}
				}
			}
			Delay(NTC_DELAY_FRAME);

			if(_classid == 523) {
				Print("Picked up " + NTC_ItemQualityToD2Color[7] + GetLocaleString(2215));
				return false;
			}
			if(_classid == 543) {
				Print("Picked up " + NTC_ItemQualityToD2Color[7] +GetLocaleString(2221));
				return false;
			}
			if(_classid == 529) {
				Print("Picked up " + GetLocaleString(2200));
				return false;
			}
			if(_classid == 530) {
				Print("Picked up " + GetLocaleString(2202));
				return false;
			
			} else if(snagitem.mode != 3 && snagitem.mode != 5) {
				var _parent;

				Common.PingDelay(100);

				_parent = snagitem.GetParent();

				return (_parent && _parent.gid == me.gid);
			}
		}

		return false;
	},

	CheckItem: function (item, checkonly) {
		var _resultArray = new Array();

		if(arguments.length < 2)
			checkonly = true;

		switch(item.quality)
		{
		case 5:
		case 8:
			_resultArray = ItemParser.CheckItem(item);
			break;
		default:
			_resultArray = ItemParser.CheckItem(item);
			
			if(Cubing.CheckItem(item, _resultArray[0]) || Runeword.CheckItem(item, checkonly))
				_resultArray[0] = 2;
			break;
		}

		return _resultArray;
	},

	IsIgnoredItemInt: function (classid) {
		var i;
		for (i = 0; i < _NTSI_IgnoredList.length; i += 1)
		{
			if(classid == _NTSI_IgnoredList[i])
				return true;
		}

		return false;
	},

	IsLimitedItemInt: function (item) {
		_NTSI_CarryKeys = Town.GetKey();
		var i, _items, _tome, _code, _type, _potnum, ;

		if (item.classid == 523) {
			return (Common.StashGoldFull() && Common.CharGoldFull());
		}
		else if (item.classid == 529) { // tp scrolls
			_tome = Town.GetTome(1);
			if(!_tome) {
				return true;
			}
			return !(_tome.GetStat(70) < 20);
		}
		else if (item.classid == 530) { // id scrolls
			_tome = Town.GetTome(0);
			if(!_tome) {
				return true;
			}		
			return !(_tome.GetStat(70) < 20);
		}	
		else if (item.classid == 543) { // key note hard coded to only grab if amount is less than 8 else because keys drop in stacks you can end with a ton of keys
			if(!_NTSI_CarryKeys) {
				return true;
			}
			return !(TownManager.CheckKeys() < 8);
		}
		//If item is a potion
		else if(item.itemtype >= 76 && item.itemtype <= 78) 
		{
			_potnum = 0;
			_code = item.code;
			_type = item.itemtype;

			for(i = 0 ; i < 4 ; i++)
			{
				if(_code.indexOf(Config.BeltColType[i]) != -1)
					_potnum += _NTSI_BeltSize;
			}

			_items = me.GetItems();

			if(_items)
			{
				for(i = 0 ; i < _items.length ; i++)    {
					if(_items[i].mode == 2 && _items[i].itemtype == _type)
					_potnum--;
				}
				
				if(_potnum < 1) {
					if(_type == 78 && _code == "rvl") {
						for(i = 0 ; i < _items.length ; i++) {
							if(_items[i].mode == 2 && _items[i].code == "rvs") {
								SetUIState(0x1F, true);
								if (Config.DropExtraRejuvs)
								Tools.DropItem(_items[i]);
								else
								me.ClickItem (1, _items[i]);
								me.Cancel(1);
								return false; 
							}                                               
						}
						if (!Config.DropExtraRejuvs) {
							for(i = 0 ; i < _items.length ; i++) {
								if (_items[i].mode == 2 && _items[i].code == "rvl" && _code == "rvl") {
									SetUIState(0x1F, true);
									me.ClickItem (1, _items[i]);
									me.Cancel(1);
									return false;
								}
							}
						}
					}
					return true;
				} 
			}
		}
		else if(item.quality == 7 && item.classid >= 603 && item.classid <= 605)
		{
			_items = me.GetItems(item.classid);

			if(_items)
			{
				for(i = 0 ; i < _items.length ; i++)
				{
					if(_items[i].quality == 7)
					return true;
				}
			}
		}

		return false;
	},

	FieldItemsToId: function () {
		var items, _value;

		items =  me.GetItems();
		if(!items || items.length < 1){
			return false;
		}
		for(var i = 0; i < items.length; i++){
			if(items[i].mode == 0 && items[i].itemloc == 0){
				_value = this.CheckItem(items[i])[0];
				if(_value == -1){
					return true;
				}
			}
		}
		return false;
	},

	FastPick: function () {
		var area, item, string, result,
			resultArray = new Array();

		if (!Config.FastPickit) {
			return;
		}
		
		item = Unit.FindUnit(NTC_UNIT_ITEM);
		
		if (item) {
			do {
				if (ignoredClassids.indexOf(item.classid) < 0 && ignoredGids.indexOf(item.gid) < 0) {
					resultArray = this.CheckItem(item, false);
					result = resultArray[0];
					
					if (result) {
						if (GetDistance(me, item) <= Config.SnagRange && !this.IsLimitedItemInt(item) && Town.CheckSpace(item.xsize, item.ysize)) {
							if(item.classid == 515 || item.classid == 516) {
								string = (COLOR_2 + "Fast Pick" + COLOR_8 + ":: " + NTC_ItemQualityToD2Color[9] + item.name);
							} 
							else if(item.itemtype == 74 || (item.classid >= 654 && item.classid <= 657) || (item.classid >= 647 && item.classid <= 652)) {
								string = (COLOR_2 + "Fast Pick" + COLOR_8 + ":: " + NTC_ItemQualityToD2Color[8] + item.name);						
							}
							else {
								string = (COLOR_2 + "Fast Pick" + COLOR_8 + ":: " + NTC_ItemQualityToD2Color[item.quality] + item.name);
							}
							
							if (this.PickUpItemInt(item)) {
								Print(string);
								
								area = GetArea();
								
								if (result === 1 && item.itemtype !== 4 && (item.itemtype < 76 || item.itemtype > 81)) {
									if (item.itemtype == 74 || (item.classid >= 654 && item.classid <= 657) || (item.classid >= 647 && item.classid <= 652)) {
										Common.SendLogToOOG(NTC_LOG_ITEM,COLOR_2 + "Fast Pick Kept: " + NTC_ItemQualityToMGRColor[8] + item.name.split("\n")[0]+ ";" + item.itemdesc + COLOR_2 + "\n iLvl: " + item.itemlevel + COLOR_2 + "\n Area: " + area.name+ "\n" + COLOR_2 +resultArray[1]+", "+resultArray[2]);
									} else {
										Common.SendLogToOOG(NTC_LOG_ITEM,COLOR_2 + "Fast Pick Kept: " + NTC_ItemQualityToMGRColor[item.quality] + item.name.split("\n")[0]+ ";" + item.itemdesc + COLOR_2 + "\n iLvl: " + item.itemlevel + COLOR_2 + "\n Area: " + area.name+ "\n" + COLOR_2 +resultArray[1]+", "+resultArray[2]);
									}
								}
							}
						}
					} else {
						ignoredGids.push(item.gid);
					}
				}
			} while (item.GetNext());
		}
	},

var ignoredGids = [];

	CheckKurastChest: function () {
		var i;
		for(i = 0 ; i < Config.Script.length; i++) {
			if(Config.Script[i].toLowerCase().indexOf("chest") != -1) {
				return true;
			}
		}
		return false;
	},
};