Include("libs/Common_Vars.ntl");

var Waypoint = {
	Check: function () {
		return SendCopyData("D2NT Manager", null, (D2NT_MGR_PRINT_LOG << 16) | 0, "WayPoint file loaded...");
	},

	VoyageToArea: function (areaID) {
		var destinationAreaID = areaID,
			checkArea = areaID,
			checkNextPrev; 

		while (1) {
			checkNextPrev = this.GetPreviousWp(checkArea); 
			if(checkNextPrev == 9999) {
				return false; 
			}
			if(wpsDontHave.indexOf(checkNextPrev) != -1) { 
				if(NTVT_IsTownWpId.indexOf(checkNextPrev) != -1) {
					Common.SendLogToOOG(NTC_LOG_COMMON, COLOR_1 + "Couldn't take wp not in that act");
					Print(COLOR_1 + "You haven't completed the quests to be in that act");
					Print(COLOR_1 + "Aborting this script");
					return false;
				} else {
					checkArea = checkNextPrev; 
				}
			} else { 
				areaID = checkNextPrev;
				if(checkNextPrev != me.areaid) {
					var thisWp = Travel.GetWaypointInt();
					Travel.GetCloserInt(thisWp);
					Common.DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, thisWp);
					if(me.TakeWaypoint(checkNextPrev)) {
						Common.PingDelay(NTConfig_AreaDelay);
						if(!Common.nTown()) {
							Precast.DoPrecast();
						}
					} else {
						return false;
					}
				}
				break;
			}
			Delay(100);
		}
		while(1) {
			if(!Common.InTown()) {
				Precast.DoPrecast(); 
			}
			switch(this.VoyageToAreaInt(destinationAreaID)) {
				case 0: 
					return false; 
				case 1: 
					this.GrabWayPoint(me.areaid);
					return true;
				case 2: 
					break;  
			}
			Delay(250);
		}
	},

	VoyageToAreaInt: function (destArea) {
		if(!Common.InTown()) {
			NTP_DoPrecast(); 
		}
		if(me.areaid == destArea) { 
			this.GrabWayPoint(me.areaid);
			return 1;
		}

		if(NTVT_IsAreaWithWp.indexOf(me.areaid) != -1) {
			if(wpsDontHave.indexOf(me.areaid) != -1) { 
				this.GrabWayPoint(me.areaid); 
			}
		}
		if(!this.AreaExitNextLevel(destArea)) {
			return 0;
		} else {
			return 2; 
		}
	},

	AreaExitNextLevel: function (destArea) {
		if(!Common.InTown()) {
			Precast.DoPrecast(); 
		}
		switch(me.areaid) {
			case 1: 
				if(this.ExitRogueEncampment()) { return true; }			// ROGUE_ENCAMPMENT(1) to BLOOD_MOOR(2) [special]
				break;
			case 2: 
				if(this.MoveToClosestPreSetUnit(3)) { return true; } 		// BLOOD_MOOR(2) to COLD_PLAINS(3) [presetunit]
				break;
			case 3: 
				if(this.MoveToClosestPreSetUnit(4)) { return true; } 		// COLD_PLAINS(3) to STONY_FIELD(4) [presetunit]
				break;
			case 4: 
				if(this.MoveToTakeStairs(4, 10)) { return true; } 		// STONY_FIELD(4) to UNDERGROUND_PASSAGE_LEVEL_1(10) [stairs]
				break;
			case 10: 
				if(this.MoveToTakeStairs(10, 5)) { return true; }		// UNDERGROUND_PASSAGE_LEVEL_1(10)  to DARK_WOOD(5) [stairs]
				break;
			case 5: 
				if(this.MoveToClosestPreSetUnit(6)) { return true; } 		// DARK_WOOD(5) to BLACK_MARSH(6) [presetunit]
				break;
			case 6:
				if(this.MoveToClosestPresetUnit(7)) { return true; } 		// BLACK_MARSH(6) to TAMOE_HIGHLAND(7) [presetunit]
				break;
			case 7: 
				if(this.MoveToClosestPresetUnit(26)) { return true; }   	// TAMOE_HIGHLAND(7) to MONASTERY_GATE(26) [presetunit]
				break;
			case 26: 	
				if(this.MoveToClosestPresetUnit(27)) { return true; }		// MONASTERY_GATE(26)  to OUTER_CLOISTER(27) [presetunit]
				break;
			case 27: 
				if(this.MoveToClosestPresetUnit(28)) { return true; }	// OUTER_CLOISTER(27) to BARRACKS(28) [presetunit]
				break;
			case 28:
				if(this.MoveToTakeStairs(28, 29)) { return true; } 		// BARRACKS(28) to JAIL_LEVEL_1(29) [stairs]
				break;
			case 29: 
				if(this.MoveToTakeStairs(29, 30)) { return true; } 		// JAIL_LEVEL_1(29) to JAIL_LEVEL_2(30) [stairs]
				break;
			case 30: 
				if(this.MoveToTakeStairs(30, 31)) { return true; } 		// JAIL_LEVEL_2(30) to JAIL_LEVEL_3(31) [stairs]
				break;
			case 31: 
				if(this.MoveToTakeStairs(31, 32)) { return true; } 		// JAIL_LEVEL_3(31) to INNER_CLOISTER(32) [stairs]
				break;
			case 32: 
				if(this.MoveToClosestPresetUnit(33)) { return true; }	// INNER_CLOISTER(32) to CATHEDRAL(33) [presetunit]
				break;
			case 33: 
				if(this.MoveToTakeStairs(33, 34)) { return true; } 		// CATHEDRAL(33) to CATACOMBS_LEVEL_1(34) [stairs]
				break;
			case 34: 
				if(this.MoveToTakeStairs(34, 35)) { return true; } 		// CATACOMBS_LEVEL_1(34) to CATACOMBS_LEVEL_2(35) [stairs]
				break;
			
			// act 2
			case 40: 
				if(destArea == 48) {
					if(this.ToSewers()) { return true; }			// LUT_GHOLEIN(40) to SEWERS_LEVEL_1(47) [special]
				}
				else if(destArea == 52 || destArea == 74 || destArea == 46) { // 52, 74, 46
					if(this.ToHarems()) { return true; }		// LUT_GHOLEIN(40) to HAREM_LEVEL_1(50) [special]
				} else {
					if(TownMove.OutOfTown2()) { return true; }	// LUT_GHOLEIN(40) to ROCKY_WASTE(41) [special]
				}
				break;
			case 47:
				if(this.MoveToTakeStairs(47, 48)) { return true; }	// SEWERS_LEVEL_1(47) to SEWERS_LEVEL_2(48) [stairs]
				break;
			case 50: 
				if(this.MoveToTakeStairs(50, 51)) { return true; } 	// HAREM_LEVEL_1(50) to HAREM_LEVEL_2(51) [stairs]
				break;
			case 51: 
				if(this.MoveToTakeStairs(51, 52)) { return true; } 	// HAREM_LEVEL_2(51) to PALACE_CELLAR_LEVEL_1(52)[stairs]
				break;
			case 52: 
				if(this.MoveToTakeStairs(52, 53)) { return true; } 	// PALACE_CELLAR_LEVEL_1(52) to PALACE_CELLAR_LEVEL_2(53) [stairs]
				break;
			case 53: 
				if(this.MoveToTakeStairs(53, 54)) { return true; } 	// PALACE_CELLAR_LEVEL_2(53) to PALACE_CELLAR_LEVEL_3(54) [stairs]
				break;
			case 54: 
				if(this.ToArcane()) { return true; } 			// PALACE_CELLAR_LEVEL_3(53) to ARCANE_SANCTUARY(74) [special]
				break;
			case 74: 
				if(this.ToCanyonOfTheMagi()) { return true; } 			// ARCANE_SANCTUARY(74) to CANYON_OF_THE_MAGI(46) [special]
				break;
			case 41: 
				if(this.MoveToClosestPresetUnit(42)) { return true; }		// ROCKY_WASTE(41) to DRY_HILLS(42) [presetunit]
				break;
			case 42: 
				if(destArea == 57) {
					if(this.MoveToTakeStairs(53, 56)) { return true; }	// DRY_HILLS(42) to HALLS_OF_THE_DEAD_LEVEL_1(56) [stairs]
				} else {
					if(this.MoveToClosestPresetUnit(43)) { return true; }		//DRY_HILLS(42) to FAR_OASIS(43) [presetunit]
				}
				break;
			case 56: 
				if(this.MoveToTakeStairs(53, 54)) { return true; } 	// HALLS_OF_THE_DEAD_LEVEL_1(56) to HALLS_OF_THE_DEAD_LEVEL_2(57) [stairs]
				break;
			case 43: 
				if(this.MoveToClosestPresetUnit(44)) { return true; }	 	// FAR_OASIS(43) to LOST_CITY(44) [presetunit]
				break;
			
			//act 3
			case 75:
				if(!TownMove.MoveTo("exit")) { return false; }
				if(this.MoveToClosestPresetUnit(76)) { return true; }	 // KURAST_DOCKTOWN(75) to SPIDER_FOREST(76) [presetunit]
				break;
			case 76:
				if(this.MoveToClosestPresetUnit(77)) { return true; }	 // SPIDER_FOREST(76) to GREAT_MARSH(77) [presetunit]
				break;
			case 77:
				if(this.MoveToClosestPresetUnit(78)) { return true; }	 // GREAT_MARSH(77) to FLAYER_JUNGLE(78) [presetunit]
				break;
			case 78:
				if(this.MoveToClosestPresetUnit(79)) { return true; }	 // FLAYER_JUNGLE(78) to LOWER_KURAST(79) [presetunit]
				break;
			case 79:
				if(this.MoveToClosestPresetUnit(80)) { return true; }	 // LOWER_KURAST(79) to KURAST_BAZAAR(80) [presetunit]
				break;
			case 80:
				if(this.MoveToClosestPresetUnit(81)) { return true; }	 // KURAST_BAZAAR(80) to UPPER_KURAST(81) [presetunit]
				break;
			case 81:
				if(this.MoveToClosestPresetUnit(82)) { return true; }	 // UPPER_KURAST(81) to KURAST_CAUSEWAY(82) [presetunit]
				break;
			case 82:
				if(this.MoveToClosestPresetUnit(83)) { return true; }	 // KURAST_CAUSEWAY(82) to TRAVINCAL(83) [preset unit]
				break;
			case 83: 
				if(this.MoveToTakeStairs(83, 100)) { return true; } 	// TRAVINCAL(83) to DURANCE_OF_HATE_LEVEL_1(100) [stairs]
				break;
			case 100: 
				if(this.MoveToTakeStairs(100, 101)) { return true; } 	// DURANCE_OF_HATE_LEVEL_1(100) to DURANCE_OF_HATE_LEVEL_2(101) [stairs]
				break;
			
			// act 4
			case 103:
				if(!TownMove.MoveTo("exit")) { return false; }
				if(this.MoveToClosestPresetUnit(104)) { return true; }	 // THE_PANDEMONIUM_FORTRESS(103) to OUTER_STEPPES)(104) [preset unit]
				break;
			case 104:
				if(this.MoveToClosestPresetUnit(105)) { return true; }	 // OUTER_STEPPES)(104) to PLAINS_OF_DESPAIR(105) [preset unit]
				break;
			case 105:
				if(this.MoveToClosestPresetUnit(106)) { return true; }	 // PLAINS_OF_DESPAIR(105) to CITY_OF_THE_DAMNED(106) [preset unit]
				break;
			case 106: 
				if(this.MoveToTakeStairs(106, 107)) { return true; } 		// CITY_OF_THE_DAMNED(106) to RIVER_OF_FLAME(107) [stairs]
				break;
			
			// act 5
			case 109:
				if(this.ExitHarrogath()) { return true; }// HARROGATH(109) to BLOODY_FOOTHILLS(110) [special]
				break;
			case 110:
				if(this.MoveToClosestPresetUnit(111)) { return true; }	 // BLOODY_FOOTHILLS(110) to FRIGID_HIGHLANDS(111) [preset unit]
				break;
			case 111:
				if(this.MoveToClosestPresetUnit(112)) { return true; }	 // FRIGID_HIGHLANDS(111) to ARREAT_PLATEAU(112) [preset unit]
				break;
			case 112:
				if(this.MoveToTakeStairs(112, 113)) { return true; }	 // ARREAT_PLATEAU(112) to CRYSTALIZED_CAVERN_LEVEL_1(113) [stairs]
				break;
			case 113:
				if(this.MoveToTakeStairs(113, 115)) { return true; }	 // CRYSTALIZED_CAVERN_LEVEL_1(113) to GlacialTrail(115) [stairs]
				break;
			case 115:
				if(this.MoveToTakeStairs(115, 117)) { return true; }	// GlacialTrail(115) to FrozenTundra(117) [stairs]
				break;
			case 117:
				if(this.MoveToTakeStairs(117, 118)) { return true; }	// FrozenTundra(117) to AncientsWay(118)[stairs]
				break;
			case 118:
				if(this.MoveToTakeStairs(118, 120)) { return true; }	// AncientsWay(118) to ArreatSummit(120)[stairs]
				break;
			case 120:
				if(this.MoveToTakeStairs(120, 128)) { return true; }	// ArreatSummit(120) to WorldstoneKeepLevel1(128) [stairs]
				break;
			case 128:
				if(this.MoveToTakeStairs(128, 129)) { return true; }	// WorldstoneKeepLevel1(128) to WorldstoneKeepLevel2(129)[stairs]
				break;
		}
		return false;
	},

	ExitRogueEncampment: function () {
		if (!TownMove.MoveTo("exit")) {
			return false;
		}
		if(!TownMove.OutOfAct1()) {
			return false; 
		} 
		Precast.DoPrecast();
		return true;
	},

	ToSewers: function () {
		if (!TownMove.Act2SewerTrapDoor()) {
			return false;
		}
		return true;
	},

	ToHarems: function () {
		while(me.areaid == 40){ 
			_unit = Travel.GetStairInt(50);
			if(!_unit)
				return false;
			if(_unit) {
				Print(_unit.name);
				Travel.MoveTo(_unit.areaid, _unit.x+4, _unit.y);
				if(GetDistance(me, _unit) > 3)
					Travel.MoveTo(_unit.areaid, _unit.x+2, _unit.y);
				Common.DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _unit);
				Common.PingDelay(1000);
			}
		}
		if(me.areaid == 50) {
			return true;
		}
		return false;
	},

	ToArcane: function () {
		if(!Travel.MoveToPresetUnit(54, NTC_UNIT_OBJECT, 298, 4, 4)){
			return false;
		}
		if(!Travel.TakeUnit(NTC_UNIT_OBJECT, 298)){
			return false;
		}
		return true;
	},

	ExitHarrogath: function () {
		TownMove.MoveTo("exit");
		_unit = NTC_FindUnit(NTC_UNIT_OBJECT, 449, 5); // this should be changed to NTV_ActivateQuestChest(id, TK)
		if(!_unit){
			return false; 
		}
		if(_unit){ // this could probably be changed to NTV_ActivateQuestChest(id, TK)
			while(_unit.mode < 1){ 
				if(_unit){
					NTM_MoveTo(_unit.areaid, _unit.x+4, _unit.y);
					if(GetDistance(me, _unit) > 3)
						NTM_MoveTo(_unit.areaid, _unit.x+2, _unit.y);
					NTC_DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _unit);
					Delay(1000);
				}
			}
		}
		if(!NTM_MoveTo(110, 4986, 5087, 5)){
			return this.Error(isgrabber);
		}
		Precast.DoPrecast();
		return me.areaid == 110;
	},

	ToCanyonOfTheMagi: function () {
		if(!Travel.MoveToPresetUnit(me.areaid, NTC_UNIT_OBJECT, 357, 2, 2)){
			return false;
		}
		var _journal = Unit.FindUnit(NTC_UNIT_OBJECT, 357);
		if(!Common.DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _journal)){
			return false;
		}
		Common.CancelOut(10);
		if(!Travel.TakeUnit(NTC_UNIT_OBJECT, 60)){
			return false;
		}
		return me.areaid == 46;
	},

	MoveToClosestPresetUnit: function (Dest) { 
		var allUnits = [],
			presetUnit = GetPresetUnits(Dest);
		
		if(!presetUnit) {
			Print(COLOR_1 + "can't find any preset units in " + GetArea(Dest).name);
			return false;
		}
		if(presetUnit) {
			for (var i = 0; i < presetUnit.length; i++) {
				allUnits.push([presetUnit[i].roomx*5+presetUnit[i].x, presetUnit[i].roomy*5+presetUnit[i].y])					
			}
		}
		allUnits.sort(this.SortCoords);
		return Travel.MoveTo(Dest, allUnits[0][0], allUnits[0][1]);
	},

	SortCoords: function (a, b) {
		return (GetDistance(me.x, me.y, a[0], a[1]) - GetDistance(me.x, me.y, b[0], b[1]));
	},

	GrabWayPoint: function (_areaid) {
		var _unit, _wp,
			_isTelekinesis = NTC_GetSkillLevel(43),
			_open = true;

		switch(_areaid) {
			case 3: _wp = 119; break;
			case 4: _wp = 119; break;
			case 5: _wp = 119; break;
			case 6: _wp = 119; break;
			case 27: _wp = 119; break;
			case 29: _wp = 157; break;
			case 32: _wp = 119; break;
			case 35: _wp = 157; break;
			case 42: _wp = 156; break;
			case 43: _wp = 156; break;
			case 44: _wp = 156; break;
			case 46: _wp = 402; break;
			case 48: _wp = 323; break;
			case 52: _wp = 288; break;
			case 57: _wp = 156; break;
			case 74: _wp = 402; break;
			case 76: _wp = 237; break;
			case 77: _wp = 237; break;
			case 78: _wp = 237; break;
			case 79: _wp = 237; break;
			case 80: _wp = 237; break;
			case 81: _wp = 237; break;
			case 83: _wp = 237; break;
			case 101: _wp = 324; break;
			case 106: _wp = 238; break;
			case 107: _wp = 238; break;
			case 111: _wp = 496; break;
			case 112: _wp = 496; break;
			case 113: _wp = 511; break;
			case 115: _wp = 511; break;
			case 117: _wp = 496; break;
			case 118: _wp = 511; break;
			case 123: _wp = 496; break;
			case 129: _wp = 494; break;
		}
		Travel.MoveToPresetUnit(_areaid, NTC_UNIT_OBJECT, _wp, 1, 1);
		if(_unit){
			if(GetDistance(me, _unit) > 2)
				Travel.MoveTo(_unit.areaid, _unit.x+1, _unit.y);
			Common.DoClick(NTC_CLICK_LDOWN, NTC_SHIFT_NONE, _unit);
			Common.PingDelay(1000);
			me.Cancel(1);
			Precast.DoPrecast(); 
			return true;
		}
		return false;
	},

	MoveToTakeStairs: function (StartArea, NextArea) {
		if(!Travel.MoveToStair(StartArea, NextArea)) {
			return false;
		}
		if(!Travel.TakeStair(NextArea)) {
			return false;
		}
		return true;
	},

	GetPreviousWp: function (wpArea) {
		switch(wpArea) {
			// act 1
			case 1: return 1; // town
			case 3: return 1;
			case 4: return 3;
			case 5: return 4;
			case 6: return 5;
			case 27: return 6;
			case 29: return 27;
			case 32: return 29;
			case 35: return 32;
			// act 2
			case 40: return 40; // town
			case 48: return 40;
			case 42: return 48;
			case 57: return 42;
			case 43: return 57;
			case 44: return 43;
			case 52: return 40;
			case 74: return 52;
			case 46: return 74;
			// act 3
			case 75: return 75; // town
			case 76: return 75;
			case 77: return 76;
			case 78: return 77;
			case 79: return 78;
			case 80: return 79;
			case 81: return 80;
			case 83: return 81;
			case 101: return 83;
			// act 4
			case 103: return 103; // town
			case 106: return 103;
			case 107: return 106;
			// act 5
			case 109: return 109; // town
			case 111: return 109;
			case 112: return 111;
			case 113: return 112;
			case 115: return 113;
			case 123: return 115;
			case 117: return 123;
			case 118: return 117;
			case 129: return 118;
		
			default: return 9999;
		}
	},

	Error: function (grabber) {
		var _Myarea = GetArea();
		if(arguments.length == 0)
			grabber = false;

		if(!grabber)
			return;
		if(grabber){
			TownMove.CheckAct();
			Skill.PutSkill(54, NTC_HAND_RIGHT);
			switch(_Myarea.name)
			{
				default:
					while(1){
						Say("!FAILED TO MOVE IN");
						Delay(2e3);
						Print(_Myarea.name);
						Say("!" + _Myarea.name.toUpperCase());
						Delay(2e3);
						Say("!IF YOUR IN JAIL LEVELS ");
						Delay(2e3);
						Say("!MOVE ME OUT FROM");
						Delay(2e3);
						Say("!WHERE I GOT STUCK");
						Delay(2e3);
						Say("!AND HIT PAUSE");
						Delay(2e3);
						Say("!TO CONTINUE");
						Delay(2e3);
						Say("!ANYPLACE ELSE YOU");
						Delay(2e3);
						Say("!MANUALLY PATH TO NEXT LVL OR WP ");
						Delay(2e3);
						Say("!OR MAKE A NEW GAME");
						Delay(2e3);

					}
			}
		}
	},

	CheckWps: function () {
		var i;
		for(i = 0; i < 39; i++) {
			if(!GetWaypoint(i)) {
				wpsDontHave.push(NTC_WPIdToAreaId[i]);
			}
			else if(GetWaypoint(i)) {
				Print(COLOR_2 + "We have wp # " + NTC_WPIdToAreaId[i]);
			}
		}
		return;
	}
};