var MyAttack = {
	Check: function () {
		return SendCopyData("D2NT Manager", null, (D2NT_MGR_PRINT_LOG << 16) | 0, "MyAttack file loaded...");
	},

	DetectAttackPattern: function () {
		return this.NecromancerAttackPatternInt();
	},

	Attack: function (target, firstorder) {
		return this.NecromancerAttackInt(target, firstorder);
	},

	NecromancerAttackPatternInt: function () {
		return false;
	},

	NecromancerAttackInt: function (target, firstorder) {
		var _primaryindex;

		if ((TownManager.CheckCurse(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe, true)) || (me.hp <= parseInt(me.hpmax * NTConfig_TPChicken,10) / 100)) {
			if (!TownManager.VisitTown()) { return 0; }
		}
		_merc = Common.GetMerc();
		if(_merc){
			if ((TownManager.CheckCurse(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe, true)) || (_merc.hp <= parseInt(_merc.hpmax * NTConfig_MercTPChicken,10) / 100)) {
				if (!TownManager.VisitTown()) { return 0; }
			}
		}

		if (Town.CheckMerc()) { // merc revive
			TownManager.VisitTown();
		}
		
		if (!me.GetState(14)) { //check and recast bone armor
			Skill.CastSkill(68, NTC_HAND_RIGHT);
		}

		if (firstorder && NTConfig_AttackSkill[0] > -1 && Attack.GetResistance(target, _NTA_SkillDamage[0]) < 100 && me.GetSkillStatus(NTConfig_AttackSkill[0]) != 8) {
			if (GetDistance(me, target) > _NTA_SkillRange[0] || !CheckCollision(me, target, 4))	{
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[0], 4);

				if (_pos) {
					Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0);
				}
			}

			if (!Skill.CastSkill(NTConfig_AttackSkill[0], _NTA_SkillHand[0], target)) {
				return 2;
			}

			return 3;
		}
		
		if (NTConfig_Curse[0] > 0 && target.spectype & 0x0A && !target.GetState(_NTA_CurseState[0]) && this.IsCursable(target))
		{
			if (GetDistance(me, target) > 25 || !CheckCollision(me, target, 4)) {
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, 25, 4);

				if (_pos) {
					Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0);
				}
			}

			if (!Skill.CastSkill(NTConfig_Curse[0], NTC_HAND_RIGHT, target)) {
				return 2;
			}

			return 3;
		}
		else if (NTConfig_Curse[1] > 0 && !(target.spectype&0x0A) && !target.GetState(_NTA_CurseState[1]) && this.IsCursable(target)) {
			if (GetDistance(me, target) > 25 || !CheckCollision(me, target, 4))	{
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, 25, 4);

				if (_pos) {
					Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0);
				}
			}

			if (!Skill.CastSkill(NTConfig_Curse[1], NTC_HAND_RIGHT, target)) {
				return 2;
			}

			return 3;
		}

		_primaryindex = (target.spectype & 0x0A) ? 1 : 3;
		
		if (Attack.GetResistance(target, _NTA_SkillDamage[_primaryindex]) < 100) {
			if (NTConfig_TeleStomp && _primaryindex === 1) {
				Travel.GetCloserInt(target);
			}
		
			if (!this.NecromancerCastSkillInt(_primaryindex, target)) {
				return 2;
			}

			if (NTConfig_ActiveSummon) {
				if (this.SkeletonArmy(NTConfig_SkeletonArmy)) {
					if (this.MageArmy(NTConfig_MageArmy)) {
						if (this.ReviveArmy(NTConfig_ReviveArmy)) {
							this.ExplodeCorpses(target);
						}
					}
				}
			} else {
				this.ExplodeCorpses(target);
			}
			
			return 3;
		}
		
		if (NTConfig_AttackSkill[5] > -1 && Attack.GetResistance(target, _NTA_SkillDamage[5]) < 100) {
			if (!this.NecromancerCastSkillInt(5, target)) {
				return 2;
			}
			
			if (NTConfig_ActiveSummon) {
				if (this.SkeletonArmy(NTConfig_SkeletonArmy)) {
					if (this.MageArmy(NTConfig_MageArmy)) {
						if (this.ReviveArmy(NTConfig_ReviveArmy)) {
							this.ExplodeCorpses(target);
						}
					}
				}
			} else {
				this.ExplodeCorpses(target);
			}
			
			return 3;
		}

		if (NTConfig_TeleStomp && Common.GetMerc() && AttackGetResistance(target, NTA_DAMAGE_PHYSICAL) < 100) {
			Travel.GetCloserInt(target);
			
			if (target.mode === 12) {
				return 2;
			}
			
			Delay(300);

			if (NTConfig_ActiveSummon) {
				if (this.SkeletonArmy(NTConfig_SkeletonArmy)) {
					if (this.MageArmy(NTConfig_MageArmy)) {
						if (this.ReviveArmy(NTConfig_ReviveArmy)) {
							this.ExplodeCorpses(target);
						}
					}
				}
			} else {
				this.ExplodeCorpses(target);
			}

			return 3;
		}
		
		return 1;
	},

	NecromancerCastSkillInt: function (index, target) {
		if (NTConfig_AttackSkill[index] === 92) {
			if (!_NTA_NovaTick || GetTickCount() > _NTA_NovaTick + NTConfig_PoisonNovaDelay) {
				if (GetDistance(me, target) > _NTA_SkillRange[index] || !CheckCollision(me, target, 4))	{
					var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[index], 4); 

					if (_pos) {
						Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0);
					}
				}
				
				_NTA_NovaTick = GetTickCount();
				
				return Skill.CastSkill(NTConfig_AttackSkill[index], _NTA_SkillHand[index], target);
			}
		} else if (me.GetSkillStatus(NTConfig_AttackSkill[index]) != 8) {
			if (GetDistance(me, target) > _NTA_SkillRange[index] || !CheckCollision(me, target, 4))	{
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[index], 4); 

				if (_pos) {
					Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0);
				}
			}

			return Skill.CastSkill(NTConfig_AttackSkill[index], _NTA_SkillHand[index], target);
		}

		if (NTConfig_AttackSkill[index+1] > -1) {
			if (GetDistance(me, target) > _NTA_SkillRange[index+1] || !CheckCollision(me, target, 4)) {
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[index+1], 4);

				if (_pos) {
					Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0);
				}
			}

			return Skill.CastSkill(NTConfig_AttackSkill[index+1], _NTA_SkillHand[index+1], target);
		}

		for (var i = 0; i < 25; i+= 1) {
			Delay(NTC_DELAY_FRAME);

			if (me.GetSkillStatus(NTConfig_AttackSkill[index]) != 8 && (GetTickCount() > _NTA_NovaTick + NTConfig_PoisonNovaDelay || !_NTA_NovaTick)) {
				break;
			}
		}

		return false;
	},

	IsCursable: function (target) {
		if (target.name.indexOf(GetLocaleString(11086)) != -1) { // Possessed
			return false;
		}

		switch (target.classid) {
		case 206: // Foul Crow Nest
		case 258: // Water Watcher
		case 261: // Water Watcher
		case 266: // Flavie
			return false;
		}
		
		return true;
	},

	SkeletonArmy: function (num) {
		if (num <= 0) {
			return true;
		}
		
		if (this.GetMinionCount(0) >= num) {
			return true;
		}
		
		for (var i = 0; i < 5; i += 1) {
			var corpse = Unit.FindUnit(NTC_UNIT_MONSTER);
			
			if (corpse) {
				do {
					if (this.IsValidCorpse(corpse)) {
						if (this.GetMinionCount(0) >= num) {
							return true;
						}
						
						Skill.CastSkill(70, NTC_HAND_RIGHT, corpse);
					}
				} while (corpse.GetNext());
			} else {
				break;
			}
		}
		
		return false;
	},

	MageArmy: function (num) {
		if (num <= 0) {
			return true;
		}
		
		if (this.GetMinionCount(1) >= num) {
			return true;
		}
		
		for (var i = 0; i < 5; i += 1) {
			var corpse = Unit.FindUnit(NTC_UNIT_MONSTER);
			
			if (corpse) {
				do {
					if (this.IsValidCorpse(corpse)) {
						if (this.GetMinionCount(1) >= num) {
							return true;
						}	

						Skill.CastSkill(80, NTC_HAND_RIGHT, corpse);
					}
				} while (corpse.GetNext());
			} else {
				break;
			}
		}
		
		return false;
	},

	ReviveArmy: function (num) {
		if (num <= 0) {
			return true;
		}
		
		if (this.GetMinionCount(2) >= num) {
			return true;
		}
		
		for (var i = 0; i < 5; i += 1) {
			var corpse = Unit.FindUnit(NTC_UNIT_MONSTER);
			
			if (corpse) {
				do {
					if(this.IsValidCorpse(corpse, true)) {
						if (this.GetMinionCount(2) >= num) {
							return true;
						}
						
						Skill.CastSkill(95, NTC_HAND_RIGHT, corpse);
					}
				} while (corpse.GetNext());
			} else {
				break;
			}
		}
		return false;
	},

	ExplodeCorpses: function (target) {
		if (NTConfig_ExplodeCorpses === 0 || target.hp === 0 || target.mode === 0 || target.mode === 12) {
			return false;
		}
		
		var exploded = 0,
			corpse = Unit.FindUnit(NTC_UNIT_MONSTER);
			
		if (corpse) {
			do {
				if (GetDistance(corpse, target) <= 10 && this.IsValidCorpse(corpse))	{
					
					if (Skill.CastSkill(NTConfig_ExplodeCorpses, NTC_HAND_RIGHT, corpse)) {
						exploded++;
					}
					
					if (exploded >= 2) {
						return false;
					}
				}
			} while (corpse.GetNext());
		}
		return true;
	},

	IsValidCorpse: function (unit, revive) {
		if (arguments.length < 2) {
			revive = false;
		}
		
		var badList = [462, 571];
		
		if (revive && unit.spectype & 0x0A || badList.indexOf(unit.classid) !== -1) {
			return false;
		}
		
		if ((unit.hp === 0 || unit.mode === 0 || unit.mode === 12) && GetDistance(me, unit) <= 25 && CheckCollision(me, unit, 4) && 
			!unit.GetState(1) && // freeze
			!unit.GetState(96) && // revive
			!unit.GetState(99) && // redeemed
			!unit.GetState(104) && // nodraw
			!unit.GetState(107) && // shatter
			!unit.GetState(118) && // noselect
			GetBaseStat("monstats2.txt", unit.classid, revive ? 97 : 95)) { // non selectable and non revivable monsters
			return true;
		}
		return false;
	},

	GetMinionCount: function (type) { // 0 - skeleton, 1 - mage, 2 - revive
		var minion, 
			num = 0;
			
		switch (type) {
			case 0:
				minion = Unit.FindUnit(NTC_UNIT_MONSTER, 363);
				break;
			case 1:
				minion = Unit.FindUnit(NTC_UNIT_MONSTER, 364);
				break;
			case 2:
				minion = Unit.FindUnit(NTC_UNIT_MONSTER);
				break;
		}
		
		if (minion) {
			do {
				if (Common.CheckOwner(minion) && minion.hp > 0) {
					if (type === 2) {
						if (minion.GetState(96)) {
							num += 1;
						}
					} else {
						num += 1;
					}
				}
			} while (minion.GetNext());
		}
		
		return num;
	}
};