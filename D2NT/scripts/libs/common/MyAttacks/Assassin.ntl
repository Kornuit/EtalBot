
var MyAttack = {
	Check: function () {
		return SendCopyData("D2NT Manager", null, (D2NT_MGR_PRINT_LOG << 16) | 0, "MyAttack file loaded...");
	},

	DetectAttackPattern: function () {
		return this.AssassinAttackPatternInt();
	},

	Attack: function (target, firstorder) {
		return this.AssassinAttackInt(target, firstorder);
	},

	AssassinAttackPatternInt: function () {
		return false;
	},

	AssassinAttackInt: function (target, firstorder) {
		var _primaryindex, _attackIndex,
			_skillCasted = 0;

		if ((TownManager.CheckCurse(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe, true)) || (me.hp <= parseInt(me.hpmax * NTConfig_TPChicken,10) / 100)) {
			if (!TownManager.VisitTown()) { return 0; }
		}
		_merc = Common.GetMerc();
		if(_merc){
			if ((TownManager.CheckCurse(NTConfig_CheckSelfSafe, NTConfig_CheckMercSafe, true)) || (_merc.hp <= parseInt(_merc.hpmax * NTConfig_MercTPChicken,10) / 100)) {
				if (!TownManager.VisitTown()) { return 0; }
			}
		}

		if (firstorder && NTConfig_AttackSkill[0] > -1 && Attack.GetResistance(target, _NTA_SkillDamage[0]) < 100) {
			if (GetDistance(me, target) > _NTA_SkillRange[0] || !CheckCollision(me, target, 4)) {
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[0], 4);

				if (_pos) Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0, false, false);
			}

			if (!Common.CastSkill(NTConfig_AttackSkill[0], _NTA_SkillHand[0], target)) return 2;

			return 3;
		}

		if (NTConfig_UseTraps) this.CheckTraps(target);

		_primaryindex = (target.spectype & 0x0A) ? 1 : 3;

		_attackIndex = Attack.GetAttackType(target, _primaryindex, 91, 81, 81);

		if (NTConfig_AttackSkill[_attackIndex] > -1) {
			_skillCasted = _attackIndex;
			if (_NTA_SkillRange[_attackIndex] < 4 && !CheckCollision(target.areaid, target.x, target.y, 1)) return 1;

			if (!this.AssassinCastSkillInt(_attackIndex, target, _primaryindex)) return 2;

			return 3;
		}

		if (NTConfig_UseTraps) {
			if (_skillCasted == 0) Delay(NTConfig_AttackSkill);

			return 3;
		}

		return 1;
	},

	AssassinCastSkillInt: function (index, target, primaryIndex) {
		if ((target.name == "Mephisto" || target.name == "Andariel" || target.name == "Duriel" || target.name == "Diablo" || target.name == "Baal") && NTConfig_AttackSkill[9] > -1) {
			index = 9;
		}
		var secondarySkill = 0;
		if (NTConfig_AttackSkill[index] == 151) {
			var _castx, _casty;

			if (GetDistance(me, target) > _NTA_SkillRange[index] || !CheckCollision(me, target, 5)) {
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[index], 5);

				if (_pos) Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0, false, false);
			}

			_castx = target.x > me.x ? target.x + 3 : target.x - 3;
			_casty = target.y > me.y ? target.y + 3 : target.y - 3;

			return Skill.CastSkill(NTConfig_AttackSkill[index], _NTA_SkillHand[index], _castx, _casty);
		}
		if (me.GetSkillStatus(NTConfig_AttackSkill[index]) != 8) {
			if (GetDistance(me, target) > _NTA_SkillRange[index] || !CheckCollision(me, target, 4)) {
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[index], 4);

				if (_pos) Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0, false, false);
			}

			return Skill.CastSkill(NTConfig_AttackSkill[index], _NTA_SkillHand[index], target);
		}

		secondarySkill = Attack.GetAttackType(target, primaryIndex + 1, 81, 81, 81);
		if (NTConfig_AttackSkill[secondarySkill] > -1) {
			if (GetDistance(me, target) > _NTA_SkillRange[secondarySkill] || !CheckCollision(me, target, 4)) {
				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, _NTA_SkillRange[secondarySkill], 4);

				if (_pos) NTM_MoveTo(target.areaid, _pos[0], _pos[1], 0, false, false);
			}

			return Skill.CastSkill(NTConfig_AttackSkill[secondarySkill], _NTA_SkillHand[secondarySkill], target);
		}
		for (var i = 0; i < 25; i++) {
			Delay(NTC_DELAY_FRAME);

			if (me.GetSkillStatus(NTConfig_AttackSkill[index]) != 8) break;
		}

		return false;
	},

	CheckTraps: function (target) {
		var x, y, parent, _trapOffset,
			traps = Unit.FindUnit(NTC_UNIT_MONSTER),
			trapcount = 0,
			_isActBoss = false;

		if (target.name == GetLocaleString(3062) || target.name == GetLocaleString(3054) || target.name == GetLocaleString(3060) || target.name == GetLocaleString(3061)) _isActBoss = true;

		if (traps) {
			do {
				if (traps.classid == 412 || traps.classid == 413 || traps.classid == 416 || traps.classid == 417) {

					parent = traps.GetParent();
					if (parent != null && parent.name == me.name) {
						if (GetDistance(target.x, target.y, traps.x, traps.y) < (_isActBoss ? NTConfig_MinBossTrapRange : NTConfig_MinTrapRange) && traps.hp > 100) {
							trapcount = trapcount + 1;
						}
					}
				}
			} while (traps.GetNext())

			if (trapcount < (_isActBoss ? NTConfig_NumBossTrap : NTConfig_NumTraps) && target.hp > 0) {

				var _pos = me.GetOptimalAttackPos(target.areaid, target.x, target.y, 13, 10);

				if (_pos) Travel.MoveTo(target.areaid, _pos[0], _pos[1], 0, false, false);


				_trapOffset = this.GetTrapAttackPattern(_isActBoss);

				for (var i = 0; i < 5; i++) {
					if (NTConfig_TrapSet[i] > 0) {
						if (i == 0 || i == 2 || i == 3)
						Delay(25);
						Skill.CastSkill((_isActBoss ? NTConfig_TrapSet[0] : NTConfig_TrapSet[i]), NTC_HAND_RIGHT, target.x + _trapOffset[i][0], target.y + _trapOffset[i][1]);
						if(NTConfig_FastPickit && target.hp <= 0) {
							break;
						}				
					}
				}
			}
		}
	},

	GetTrapAttackPattern: function (isActBoss) {
		var _attackPattern = new Array(5),
				_bossOffset = 1;

		if (NTConfig_TrapAttackPattern == 1) { // Pentagram
			_attackPattern[0] = [-2 - (isActBoss ? _bossOffset : 0), -2 - (isActBoss ? _bossOffset : 0)];
			_attackPattern[1] = [0, 2 + (isActBoss ? _bossOffset : 0)];
			_attackPattern[2] = [2 + (isActBoss ? _bossOffset : 0), -2 - (isActBoss ? _bossOffset : 0)];
			_attackPattern[3] = [-3 - (isActBoss ? _bossOffset : 0), 1 + (isActBoss ? _bossOffset : 0)];
			_attackPattern[4] = [3 + (isActBoss ? _bossOffset : 0), 1 + (isActBoss ? _bossOffset : 0)];
		} else if (NTConfig_TrapAttackPattern == 2) { // X - axis
			_attackPattern[0] = [0, 0];
			_attackPattern[1] = [1 + (isActBoss ? _bossOffset : 0), 0];
			_attackPattern[2] = [-1 - (isActBoss ? _bossOffset : 0), 0];
			_attackPattern[3] = [2 + (isActBoss ? _bossOffset : 0), 0];
			_attackPattern[4] = [-2 - (isActBoss ? _bossOffset : 0), 0];

		} else if (NTConfig_TrapAttackPattern == 3) { // Y - axis
			_attackPattern[0] = [0, 0];
			_attackPattern[1] = [0, 1 + (isActBoss ? _bossOffset : 0)];
			_attackPattern[2] = [0, -1 - (isActBoss ? _bossOffset : 0)];
			_attackPattern[3] = [0, 2 + (isActBoss ? _bossOffset : 0)];
			_attackPattern[4] = [0, -2 - (isActBoss ? _bossOffset : 0)];
		} else { // quincunx
			_attackPattern[0] = [2 + (isActBoss ? _bossOffset : 0), 2 + (isActBoss ? _bossOffset : 0)];
			_attackPattern[1] = [-2 - (isActBoss ? _bossOffset : 0), -2 - (isActBoss ? _bossOffset : 0)];
			_attackPattern[2] = [-2 - (isActBoss ? _bossOffset : 0), 2 + (isActBoss ? _bossOffset : 0)];
			_attackPattern[3] = [2 + (isActBoss ? _bossOffset : 0), -2 - (isActBoss ? _bossOffset : 0)];
			_attackPattern[4] = [0, 0];
		}

		return _attackPattern;
	}

	InitializeAssassinAttacks: function () {
		NTConfig_MinTrapRange = 999;
		NTConfig_MinBossTrapRange = 999;
		NTConfig_NumTraps = 0;
		NTConfig_NumBossTrap = 0;

		for (var i = 0; i < 5; i++) {
			if (NTConfig_TrapSet[i] > 0) {
				// Find the lowest trap range
				switch (NTConfig_TrapSet[i]) {
				case 271:
					// Lightning Sentry
				case 276:
					// Death Sentry	
					NTConfig_NumTraps++;
					if (25 < NTConfig_MinTrapRange) {
						NTConfig_MinTrapRange = 25;
					}
					break;
				case 261:
					// Charged Bolt Sentry
					NTConfig_NumTraps++;
					if (10 < NTConfig_MinTrapRange) {
						NTConfig_MinTrapRange = 10;
					}
					break;
				case 262:
					// Wake of Fire
					NTConfig_NumTraps++;
					if (25 < NTConfig_MinTrapRange) {
						NTConfig_MinTrapRange = 25;
					}
					break;
				case 272:
					// Wake of Inferno
					NTConfig_NumTraps++;
					if (15 < NTConfig_MinTrapRange) {
						NTConfig_MinTrapRange = 15;
					}
					break;
				default:
					// User using invalid trap
					// Do Nothing
					break;
				}

			}

			if (NTConfig_ActBossTrapSet[i] > 0) {
				// Find the lowest trap range
				switch (NTConfig_ActBossTrapSet[i]) {
				case 271:
					// Lightning Sentry
				case 276:
					// Death Sentry
					NTConfig_NumBossTrap++;
					if (25 < NTConfig_MinBossTrapRange) {
						NTConfig_MinBossTrapRange = 25;
					}
					break;
				case 261:
					// Charged Bolt Sentry
					NTConfig_NumBossTrap++;
					if (10 < NTConfig_MinBossTrapRange) {
						NTConfig_MinBossTrapRange = 10;
					}
					break;
				case 262:
					// Wake of Fire
					NTConfig_NumBossTrap++;
					if (25 < NTConfig_MinBossTrapRange) {
						NTConfig_MinBossTrapRange = 25;
					}
					break;
				case 272:
					// Wake of Inferno
					NTConfig_NumBossTrap++;
					if (15 < NTConfig_MinBossTrapRange) {
						NTConfig_MinBossTrapRange = 15;
					}
					break;
				default:
					// User using invalid trap
					// Do Nothing
					break;
				}
			}
		}
	}
};
