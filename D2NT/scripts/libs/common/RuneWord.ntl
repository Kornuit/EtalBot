Include("libs/Common_Vars.ntl");
Include("libs/common/ColorConverter.ntl");

var Runeword = {
	Check: function () {
		return SendCopyData("D2NT Manager", null, (D2NT_MGR_PRINT_LOG << 16) | 0, "Runeword file loaded...");
	},

	CheckItem: function (item, checkonly) {
		var i, n, j, _baseitem, _needhel,
			_classid = item.classid;

		if(!NTConfig_MakeRunewords)
			return false;

		if(arguments.length < 2)
			checkonly = false;

		for(i = 0 ; i < NTConfig_Runeword.length ; i++)
		{
			_needhel = 1;
			_items = me.GetItems(NTRW_AliasToClassid(NTConfig_Runeword[i][0]));
			
			if(!_items || _items.length == 0)
				continue;

			for(n = 0 ; n < _items.length ; n++)
			{
				if(_items[n].GetStat(194) == (NTConfig_Runeword[i].length - 1) && _items[n].quality < 4 && _items[n].mode == 0 && (_items[n].itemloc == 0 || _items[n].itemloc == 4) && !(_items[n].itemflag&0x4000000))
				{
					_baseitem = _items[n];
					break;
				}
			}

			if(_baseitem)
			{
				for(j = 1 ; j < NTConfig_Runeword[i].length ; j++)
				{
					if(NTRW_AliasToClassid(NTConfig_Runeword[i][j]) == 624)
						_needhel++;
						
					if(NTRW_AliasToClassid(NTConfig_Runeword[i][j]) == _classid)
					{
						if(this.CheckItemNum(this.AliasToClassid(NTConfig_Runeword[i][j])) < 1 || checkonly)
							return true;
					}
				}
				
				if(_classid == 624)
				{
					if(this.CheckItemNum(624) < _needhel || checkonly)
						return true;
				}
			}
		}

		return false;
	},

	CheckRunewords: function () {
		var checkrunes, _needhel, i, n, j,
			checkbase = false,
			result = true;
		
		for(i = 0 ; i < NTConfig_Runeword.length ; i++)
		{
			checkbase = false;
			checkrunes = true;
			_needhel = 1;
		
			for(j = 0 ; j < NTConfig_Runeword[i].length ; j++)
			{
				if(j == 0)
				{
					_items = me.GetItems(this.AliasToClassid(NTConfig_Runeword[i][0]));
					
					if(!_items || _items.length == 0)
						break;
					
					for(n = 0 ; n < _items.length ; n++)
					{
						if(_items[n].GetStat(194) == (NTConfig_Runeword[i].length - 1) && _items[n].quality < 4 && (_items[n].itemloc == 0 || _items[n].itemloc == 4) && !(_items[n].itemflag&0x4000000))
						{
							checkbase = true;
							break;
						}
					}
					
					continue;
				}
				
				if(this.CheckItemNum(this.AliasToClassid(NTConfig_Runeword[i][j])) == 0)
					checkrunes = false;
					
				if(this.AliasToClassid(NTConfig_Runeword[i][j]) == 624)
					_needhel++;
					
				if(this.CheckItemNum(624) < _needhel)
					checkrunes = false;
					
				if(checkrunes && checkbase)
					return true;
			}
		}
		
		return false;
	},

	CheckItemNum: function (id) {
		var i, _items,
			num = 0;
		
		_items = me.GetItems();
		
		if(!_items)
			return 0;
		
		for(i = 0 ; i < _items.length ; i++)
		{
			if(id == _items[i].classid)
				num++;
		}
		
		return num;
	},

	MakeRuneword: function () {
		var _items, baseitem, haveitem,
			_helrune = me.GetItems(624),
			_needhel = 1;
		
		if(!_helrune || _helrune.length < _needhel)
			return false;

		for(var i = 0 ; i < NTConfig_Runeword.length ; i++)
		{
			baseitem = false;
			_needhel = 1;
			
			haveitem = true;
			
			for(var j = 0 ; j < NTConfig_Runeword[i].length ; j++)
			{
				if(this.AliasToClassid(NTConfig_Runeword[i][j]) == 624)
					_needhel++;

				_items = me.GetItems(this.AliasToClassid(NTConfig_Runeword[i][j]));

				if(!_items || _items.length == 0)
				{
					haveitem = false;
					break;
				}
			}
			
			if(!_helrune || _helrune.length < _needhel)
				haveitem = false;

			if(haveitem)
			{
				for(var j = 0 ; j < NTConfig_Runeword[i].length ; j++)
				{
					_items = me.GetItems(this.AliasToClassid(NTConfig_Runeword[i][j]));
					
					for(var n = 0 ; n < _items.length ; n++)
					{
						if(_items[n].GetStat(194) == (NTConfig_Runeword[i].length - 1) && _items[n].quality < 4 && _items[n].mode == 0 && (_items[n].itemloc == 0 || _items[n].itemloc == 4) && !(_items[n].itemflag&0x4000000))
						{
							baseitem = _items[n];
							break;
						}
					}
					
					if(j == 0)
						continue;

					if(!baseitem)
						break;

					if(!Town.CheckSpace(baseitem.xsize, baseitem.ysize)) 
					{
						Print("Insufficient space");
						return false;
					}
					
					Common.ItemToCursor(_items[0]);
					Common.PingDelay(250);
					
					if(!me.itemoncursor) 
					{
						for(var c = 0 ; c < 3 ; c++) 
						{
							Common.ItemToCursor(_items[0]);
							if(me.itemoncursor)
								break;
						}
					}
					
					me.ClickItem(0, baseitem.x, baseitem.y, baseitem.itemloc);
					Common.PingDelay(250);
				}

				if(baseitem) 
				{
					var _result = 0;
					
					for(var m = 0; m < NTConfig_KeepRuneword.length && !_result; m++)
						_result = (this.MiniNTIPCheckItem(baseitem, NTConfig_KeepRuneword[m]) == 1);

					if(!_result) 
					{
						Common.SendLogToOOG(NTC_LOG_ITEM, COLOR_1 + "Rerolling Runeword: " + NTC_ItemQualityToMGRColor[baseitem.quality] + baseitem.name.split("\n")[0]+ ";" + baseitem.itemdesc + "\n " + COLOR_2 + "iLvl: " + baseitem.itemlevel);
						me.Cancel(1);
						this.BuyTP();
						TownManager.TownMove("stash");
						
						var _stash = Unit.FindUnit(NTC_UNIT_OBJECT, NTC_UNIT_STASH, 5);
					
						Town.DoInteract(_stash);
						this.Reroll(baseitem);
						TownManager.VisitStash(false);
					}
					else
						Common.SendLogToOOG(NTC_LOG_ITEM, COLOR_2 + "Kept Runeword: " + NTC_ItemQualityToMGRColor[baseitem.quality] + baseitem.name.split("\n")[0]+ ";" + baseitem.itemdesc + "\n " + COLOR_2 + "iLvl: " + baseitem.itemlevel);
				}
			}
		}
	},

	MiniNTIPCheckItem: function (item, ntip) {
		var _result = 0,
			_identified = item.itemflag & _NTIPAliasFlag["identified"],
			_ntip = ItemParser.ParseLineInt(ntip);

		if (_ntip)
		{
			if (_ntip[0].length > 0)
			{
				if (eval(_ntip[0]))
				{
					if (_ntip[1].length > 0)
					{
						if (eval(_ntip[1]))
							return 1;
						else if (!_identified && _result == 0)
							_result = -1;
					}
					else
						return 1;
				}
			}
			else if (_ntip[1].length > 0)
			{
				if (eval(_ntip[1]))
					return 1;
				else if (!_identified && _result == 0)
					_result = -1;
			}
		}

		return _result;
	},

	BuyTP: function () {
		var i, _npc, _items;
		
		_items = me.GetItems(529);
		
		if(_items.length > 0)
			return false;
		
		var _npcList = [["akara", NTC_NPC_ID_AKARA], ["drognan", NTC_NPC_ID_DROGNAN], ["ormus", NTC_NPC_ID_ORMUS], ["jamella", NTC_NPC_ID_JAMELLA], ["malah", NTC_NPC_ID_MALAH]];
		
		TownMove.MoveTo(_npcList[me.act-1][0]);
		_npc = Unit.FindUnit(NTC_UNIT_NPC, _npcList[me.act-1][1], 5);
		if(_npc)
			Town.DoInteract(_npc);
		Town.DoTrade(_npc);
		for(i = 0 ; i < 3 ; i++) {
			_items = _npc.GetItems(529);
			Town.ShopItem(_items[0], _npc, 3);
			_items = me.GetItems(529);
			if(_items.length > 0)
				break;
		}

		me.Cancel(1);
		
		return true;
	},

	Reroll: function (item) {
		var _tpscroll = me.GetItems(529),
			_helrune = me.GetItems(624),
			_cube = me.GetItems(NTC_UNIT_CUBE);
		
		Cubing.MoveItemToCubeInt(_cube[0], _tpscroll[0]);
		Cubing.MoveItemToCubeInt(_cube[0], _helrune[0]);
		Cubing.MoveItemToCubeInt(_cube[0], item);
		
		Cubing.OpenCubeInt(_cube[0]);
		
		Transmute();
		Common.PingDelay(800);
		
		if(Cubing.CheckCubeInventoryInt() > 0)	
		{
			if(Cubing.ClearCubeInt() < 1)
				return false;

			Cubing.CloseCubeInt();
		}
		
		me.Cancel(1);
	},

	AliasToClassid: function (input) {
		if(isNaN(input))
			return _NTIPAliasClassID[input.replace(/\s+|;/g, "").toLowerCase()];
		return input;
	}
};